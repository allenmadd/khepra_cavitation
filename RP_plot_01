#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Sep 24 20:38:04 2019

@author: mallen
"""

#!python
"""
using the functions of RP_lib to
- simulate a solution to the Rayleigh-Plesset equation
- pickle the time series results
The trajectory comparisons reveal how an increase in driving amplitude enhances
the inertia effect: it leads to bigger bubbles and delays the onset of collapse.
Markus Stokmaier, Weimar, March 2018

adapted for khepra by madeleine allen september 2019
"""
import numpy as np
import matplotlib.pyplot as plt
from RP_lib import Bubble, sphere_volume

#change whether you want the bubble to radiate or not
radiation_on=True

if radiation_on:
    suffix=''
else:
    suffix='_norad'

#define 3 objects of class bubble
b1=Bubble()
b2=Bubble()
b3=Bubble()

#bubble list
bli=[b1,b2,b3]

#define amplitude of acoustic wave for 3 cases
amps=[0.85,1.1,1.4]


for i,b in enumerate(bli):
    b.bubble_radiates=radiation_on
    b.amp=amps[i]*b.p0 #total pressure is pressure already present * acoustic pressure
    b.R0=8e-6          #these are set automatically and I do not know why
    b.R_start=8e-6     #
    #b.f=18e3
    b.t_run=2./b.f
    b.integrate_RK4()
    b.list2array()
    b.pickle_self(suffix+'_'+str(i))

cli=['k','b','c']
plt.figure(figsize=[8,4])
ax1a=plt.axes()

for i,b in enumerate(bli):
    ax1a.plot(1e6*b.t, b.R[:,0]*1e6,cli[i]+'-',lw=2,label=r'A = {}*$p_0$'.format(amps[i]))

ax1a.set_ylim(ymin=0)
ax1a.set_ylabel(r'bubble radius in $\mu$m')
ax1a.set_xlabel(r'time in $\mu$s')

plt.legend(loc='upper right')

ax1b=ax1a.twinx()
ax1b.plot(1e6*b.t,b.p_acoustic(b.t)/np.amax(np.fabs(b.p_acoustic(b.t))),'g--',lw=2)
ax1b.set_ylabel('normalised driving pressure signal',color='g')
ax1b.set_ylim([-1,1])

for tl in ax1b.get_yticklabels():
    tl.set_color('g')

plt.tight_layout()
#plt.show()
plt.savefig('RPeq_cornOil_60kHz'+suffix+'.png',dpi=240,bbox_inches='tight') # see here: http://stackoverflow.com/questions/21288062/second-y-axis-label-getting-cut-off
plt.close()


#bubble area
#bubbleArea = 4*np.pi*((bubbleDiameter/2)**2)
#specific heat of castor oil
specificHeat = 1.8 #(kJ/(kg K))
#emissivity of hot surface (using water)
emissivity = .96
#layer thickness (for estimation)
d = .01 #mm
#thermal conductivity (for castor oil)
thermalConductivity = .180 #(W/m K)
#viscosity (for castor oil)
viscosity = .650 #(N s/m2, Pa s)
#density 
density = 0.918 #g/cm^3
#steffon's constant
steffon = 5.67 * 10**-8 #W/m^2K^4
#surface tension of corn oil
surfaceTension = 31.6 #mN/m
#number of moles
moles = 1

#temperature data bubble 0 (trying my best here ok)
rad = bli[0].R[:,1]
sphereVolume=np.zeros(33335)
for i in range(len(rad)-1):
    radi = rad[i]
    sphereVolume[i] = sphere_volume(radi)
    
bli[0].T=np.zeros(33335)

time = 1.9e-5
deltaT = np.zeros(33335)
for i in range(len(bli[0].R[:,1])-1):
    deltaT[i] = (1/thermalConductivity)*(bli[0].Pg[i] * sphereVolume[i]- thermalConductivity*(4*np.pi*bli[0].R[i,1]**2)*(20000-298)*time/.01 - emissivity*steffon*(4*np.pi*bli[0].R[i,1]**2)*(20000**4 - 298**4)*time) 
    if i > 0:        
        bli[0].T[i] = bli[0].T[i-1] + deltaT[i]
    else:
        bli[0].T[i] = deltaT[i]

#temperature data bubble 1 (trying my best here ok)
rad = bli[1].R[:,1]
sphereVolume=np.zeros(723467)
for i in range(len(rad)-1):
    radi = rad[i]
    sphereVolume[i] = sphere_volume(radi)
    
bli[1].T=np.zeros(723467)

time = 1.9e-5
deltaT = np.zeros(723467)
for i in range(len(bli[1].R[:,1])-1):
    deltaT[i] = (1/thermalConductivity)*(bli[1].Pg[i] * sphereVolume[i]- thermalConductivity*(4*np.pi*bli[1].R[i,1]**2)*(20000-298)*time/.01 - emissivity*steffon*(4*np.pi*bli[1].R[i,1]**2)*(20000**4 - 298**4)*time) 
    if i > 0:        
        bli[1].T[i] = bli[1].T[i-1] + deltaT[i]
    else:
        bli[1].T[i] = deltaT[i]

#temperature data bubble 2 (trying my best here ok)
rad = bli[2].R[:,1]
sphereVolume=np.zeros(610300)
for i in range(len(rad)-1):
    radi = rad[i]
    sphereVolume[i] = sphere_volume(radi)
    
bli[2].T=np.zeros(610300)

time = 1.9e-5
deltaT = np.zeros(610300)
for i in range(len(bli[2].R[:,1])-1):
    deltaT[i] = (1/thermalConductivity)*(bli[2].Pg[i] * sphereVolume[i]- thermalConductivity*(4*np.pi*bli[2].R[i,1]**2)*(20000-298)*time/.01 - emissivity*steffon*(4*np.pi*bli[2].R[i,1]**2)*(20000**4 - 298**4)*time) 
    if i > 0:        
        bli[2].T[i] = bli[2].T[i-1] + deltaT[i]
    else:
        bli[2].T[i] = deltaT[i]








